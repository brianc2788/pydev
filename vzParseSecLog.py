'''
vzParseSecLog.py
-----------
Parse & extract foreign IPv4 addresses from my
router's SecurityLog.txt. Don't worry about it.
Seems to be unaltered capture file (tcpdump?).

note to self - worked fine & chose to filter out duplicate ip's.
			   completely went to hell when I started using
			   argparse. another time, then...
			   But seriously, why does it return a list when
			   forget it im just using sys. what a mess.

http://brianc2788.github.io/
'''
import re,sys
#import argparse

# Unused, problematic argparse implementation.
'''
aparser = argparse.ArgumentParser(
	prog='parselog.py',
	description='Parse & extract IPv4 addresses from Verizon router\'s plain-text security log.',
	epilog='http://brianc2788.github.io/'
	)

#Could not figure out return type; seemed to change depending on input despite setting attributes.
#Just wanna to parse my logs for now.
aparser.add_argument(
	'-f','--file',
	help='Input file (router sec log).',
	nargs=1,
	type=str,
	default='SecurityLog.txt',
	dest='logname'
	)
'''

#const
#SECLOGNAME = 'SecurityLog.txt'

reIPv4 = re.compile(r"""SRC=       # Source addr substr.
						\d{1,3}    # First 8-bits of IPv4 addr.
						\.         # Dot separator.
						\d{1,3}
						\.
						\d{1,3}
						\.
						\d{1,3}    # Final 8-bits.
	""", re.VERBOSE)

def main():

	""" argparse object containing attributes generated by CLI args. """
	#options = aparser.parse_args()

	argCount = len(sys.argv)
	if argCount > 1 and argCount < 3:
		SECLOGNAME = sys.argv[1]
	else:
		SECLOGNAME = 'SecurityLog.txt'
	""" DEBUG
	print(argCount)
	print(SECLOGNAME)
	"""

	#Get file text.
	logtext = ''
	with open(SECLOGNAME, mode='rt') as logfile:
		logtext = logfile.read()

	#Find all IP addresses failing login from the WAN interface. Then hunt them down.
	matches = re.findall(reIPv4, logtext)
	uniqueList = []

	#Print matches. Slice off 'SEC=' prefix.
	for match in matches:
		if match not in uniqueList:
			uniqueList.append(match)
			print(match[4:])

if __name__ == '__main__':
	main()
