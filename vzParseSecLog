#!/usr/bin/env python3
'''
vzParseSecLog.py
-----------
Parse & extract foreign IPv4 addresses from my
router's SecurityLog.txt. Don't worry about it.
Seems to be unaltered capture file (tcpdump?).

argparse was a real pain in the ass. Not even
sure why it did some of the things it did;
particularly the way parse_args() and Namespace
works. It's a mess, but it works.

http://brianc2788.github.io/
'''
import re,sys,os
import argparse

aparser = argparse.ArgumentParser(
	prog='parselog.py',
	description='Parse & extract IPv4 addresses from Verizon router\'s plain-text security log.',
	epilog='http://brianc2788.github.io/'
	)

""" Input - Optional file name. """
aparser.add_argument(
	'-f','--file',
	help='Security log (plaintext).',
	nargs=1,
	type=str,
	default='SecurityLog.txt',
	dest='LOGFILE'
	)

aparser.add_argument(
	'-o','--output',
	help='Optional output file.',
	nargs=1,
	type=str,
	dest='OUTFILE'
	)

""" Blank class object for argparse's Namespace object type. """
class options(object):
	pass

""" Regex for finding IPv4 addresses in what appears to be tcpdump output. """
reIPv4 = re.compile(r"""SRC=       # Source addr substr.
						\d{1,3}    # First 8-bit address value.
						\.         # Dot separator.
						\d{1,3}
						\.
						\d{1,3}
						\.
						\d{1,3}    # Final 8-bits.
	""", re.VERBOSE)
#NOTE: Was going to use groups but I immediately got confused. Another time.

def matchLog(logName):
	logText = ''
	with open(logName, mode='rt') as file:
		if not file.readable():
			print('Error while trying to read the file. Aborting...\n', end=None)
		else:
			logText = file.read()

		#Find all IP addresses failing login from the WAN interface. Then hunt them down.
		matches = re.findall(reIPv4, logText)
		uniqueList = []

		for match in matches:
			if match not in uniqueList:
				uniqueList.append(match)

	return uniqueList

def main():
	aparser.parse_args(namespace=options)

	""" For some reason, the type changes if the user inputs a filename.
	Else, need user to surround arg in quotes(?).
	"""
	fileName = options.LOGFILE
	if type(fileName) == str:
		logf = fileName
	else:
		logf = fileName[0]

	""" Check working directory for log file. Exit if it isn't there. """
	if not os.path.exists(os.path.join(os.getcwd(),logf)):
		print('Couldn\'t find your file: {0}\nAborting operations...\n'.format(logf), end=None)
		sys.exit(1)

	""" ipList - Str list of IPv4 addresses. Apparently, failed login attempts on the router. """
	ipList = matchLog(logf)
	for addr in ipList:
		print(addr.strip('SRC='))

if __name__ == '__main__':
	main()
