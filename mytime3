#!/usr/bin/env python3
'''
mytime3
--------------------
Simple digital clock GUI.

I would tell you that I used pygame, but pygame
insists on telling you itself...

TODO: Put this frankenstein-monster script to rest and
      redo it properly. Never import stuff like this
      again.

http://brianc2788.github.io/
'''
from os import path, getcwd
from sys import exit
from time import localtime
from subprocess import getoutput
from platform import platform
import pygame

""" Use 12-hour format and fix mins and secs. """
def strSysTime():
    currentT = localtime()
    timeString = str()

    if currentT.tm_hour > 12:
        timeString += str(currentT.tm_hour - 12)
    elif currentT.tm_hour == 0:
        timeString += '12'
    else:
        timeString += str(currentT.tm_hour)
    if currentT.tm_min < 10:    
        timeString += ':0'+str(currentT.tm_min)
    else:
        timeString += ':'+str(currentT.tm_min)
    if currentT.tm_sec < 10:
        timeString += ':0'+str(currentT.tm_sec)
    else:
        timeString += ':'+str(currentT.tm_sec)
    return timeString

def main():
    """ Pygame - init and create some glob vars. """
    pygame.init()
    pygame.display.set_caption('mytime3')
    ''' Intended for cross-platform compatibility, but ended up
    a complete mess. Patched it up and works on Windows & Linux,
    but it ugly as all-hell.
    Will redo from scratch using better practices and setuptools at a later date.
    '''
    if 'Windows' in platform():
        basepath = getoutput('where mytime3') # If this script stops working on Windows, remove this line and uncomment the following one.
        #basepath = getcwd()
        path_font = path.join(basepath, 'resources','fonts','Pixeltype.ttf')
    else:
        if path.islink(getoutput('which mytime3')):
            basepath = getoutput('which mytime3')
            basepath = getoutput('readlink '+basepath)
        path_font = path.join(path.dirname(basepath), 'resources','fonts','Pixeltype.ttf')

    font = pygame.font.Font(path_font,200)
    blankSurf = font.render('_______________',False,(0,0,0),(0,0,0))  #placeholder for blanking the screen.
    windowSurface = pygame.display.set_mode((font.size(strSysTime()+' ')))
    ''' Tried constant screen width but failed due to variable-width font. Char for "1" is the main issue.
    windowSurface = pygame.display.set_mode((460, 100))
    '''
    appclock = pygame.time.Clock()
    currentTime = ''

    """ Main loop """
    bRun = 1
    try:
        while bRun:
            """ Event loop - get queue and check for quit. """
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    bRun = 0

            """ Call strSysTime(), render, clear, blit, update. """
            currentTime = strSysTime()
            timeSurf = font.render(currentTime,False,(255,255,255),(0,0,0)).convert()
            windowSurface.blit(blankSurf,(0,0))
            windowSurface.blit(timeSurf,(0,0))
            pygame.display.update()
            appclock.tick(25)     #Update 25x per second; same as old PAL format.

    except BaseException as e:
        if KeyboardInterrupt:
            pygame.quit()
            exit(0)
        else:
            pygame.quit()
            print(f'Caught an exception.\n{e}')
            exit(0)

    pygame.quit()

if __name__ == '__main__':
    main()
